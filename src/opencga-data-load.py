#!/usr/bin/env python3
# opencga-data-load v0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://documentation.dnanexus.com/developer for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy

# add required libraries
from pyopencga.opencga_client import OpencgaClient
from pyopencga.opencga_config import ClientConfiguration


@dxpy.entry_point('main')
def main(input_vcf):
    """
    This function downloads a list of VCFs (only one is expected but supports an array).
    :param input_vcf list of names of the VCF files to be downloaded
    """

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    input_vcf = [dxpy.DXFile(item) for item in input_vcf]

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    for i, f in enumerate(input_vcf):
        dxpy.download_dxfile(f.get_id(), "input_vcf-" + str(i))

    # Fill in your application code here.

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    output = dxpy.upload_local_file("output")

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["output"] = dxpy.dxlink(output)

    return output


dxpy.run()
