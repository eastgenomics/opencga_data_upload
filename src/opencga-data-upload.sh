#!/bin/bash
# opencga_data_upload-v2 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of input_vcf: '${input_vcf[@]}'"
    echo "Value of input_credentials: '$credentials'"
    echo "Value of input_metadata: '$input_metadata'"


    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
    # Fill in your application code here.

    # Define a function for reading credentials.json
    read_cred () {
      user=$(jq .user $1)
      password=$(jq .password $1)
      host=$(jq .host $1)
      cli=$(jq .cli_dnanexus_id $1)
    }

    # Download credentials
    dx download "$credentials" -o credentials
    # Get file name
    name=$(dx describe "$credentials" --name)
    echo "Credentials file $name has been downloaded"

    # Read the credentials
    read_cred credentials
    cli=$(echo $cli | tr -d \")
    echo "opencga cli dna nexus id is $cli"

    # Download and unpack opencga ($cli variable is taken from credentials)
    dx download "$cli" -o input_cli
    cli_tar=$(dx describe "$cli" --name)
    echo "Compressed cli: $cli_tar"
    tar -xzf input_cli
    cli_untar=$(echo $cli_tar | sed 's/\.tar\.gz//g')
    #echo "Untar cli: $cli_untar"
    check=$(ls $cli_untar/bin)
    if [ $check != "opencga.sh" ]; then
      dx-jobutil-report-error "opencga.sh not found in the provided cli folder. As a result no further actions can be performed"
    else
      echo "$check is ready to use"
    fi

    # Download metadata file
    dx download "$input_metadata" -o metadata
    name=$(dx describe "$input_metadata" --name)
    echo "Metadata file $name has been downloaded"

    # Check arguments that will be passed to the py script
    # echo " The user: $user"
    # echo " The password: $password"
    # echo " The host: $host"
    # echo " The cli: /home/dnanexus/$cli_untar/bin/opencga.sh"

    # process one VCF at a time
    echo "$input_vcf"
    # Download file. Don't rename it because we need the name as it is
    dx download "$input_vcf"
    # Get file name
    vcf_name=$(dx describe "$input_vcf" --name)
    echo "File ${vcf_name} has been downloaded"

    #Display all the files in current directory --> just for testing
    pwd
    ls -l

    # Install python dependencies
    pip install -r /home/dnanexus/requirements.txt -q

    # Run the python script
    echo "### Python script starts here:"
    opencga_cmd="python3 opencga_upload_and_index.py --metadata /home/dnanexus/metadata \
                                                    --host $host
                                                    --user $user \
                                                    --password $password \
                                                    --cli /home/dnanexus/$cli_untar/bin/opencga.sh \
                                                    --vcf /home/dnanexus/${vcf_name}"
    # TODO Comment this echo
    echo ${opencga_cmd}
    eval ${opencga_cmd}
    rm ${vcf_name}

    #Display all the files in current directory --> just for testing
    # ls -l
    # Testing
    echo "Now I'm going to cat the log"
    cat opencga_loader.log

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.
    echo "File $vcf_name is loaded into the opencga study $study" > /home/dnanexus/output_file

    output_file=$(dx upload output_file --brief)
    output_loader=$(dx upload opencga_loader.log)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    ### ADD OUTPUT LOADER HERE!
    dx-jobutil-add-output output_file "$output_file" --class=file
}
