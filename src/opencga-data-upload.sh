#!/bin/bash
# opencga-data-upload 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

# FILE ID POINTING TO THE OPENCGA CLI
# --------------------------------------------
# If a new version of OpenCGA is released, this file ID needs to be changed
opencga_cli_file_id='project-G5XXyY84XjQPZKJfKX0ZQZpz:file-G6XPFF04XjQP8Z175fG1q8Y7'


main() {
    echo "Summary of data provided:"
    echo "- Input VCF(s): ${input_vcf}"
    echo "- Metadata: '${input_metadata}'"
    echo "- Credentials file: '${input_credentials}'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
    # Fill in your application code here.

    # Download inputs in the "in" folder
    # ------------------------------------------------
    mkdir -p /home/dnanexus/in

    # Get the original name of the VCF file
    vcf_name=$(dx describe "${input_vcf}" --name)

    dx download "${input_vcf}" -o /home/dnanexus/in/"${vcf_name}"
    dx download "${input_metadata}" -o /home/dnanexus/in/metadata.json
    dx download "${input_credentials}" -o /home/dnanexus/in/credentials.json

    # Download openCGA CLI and uncompress
    dx download ${opencga_cli_file_id}
    cli_name=$(dx describe ${opencga_cli_file_id} --name)
    tar -xzf /home/dnanexus/"${cli_name}"

    # Get DNAnexus file ID
    dnanexus_fid=$(dx describe ${opencga_cli_file_id} --json | \
    python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")

    # Install python dependencies
    pip install -r /home/dnanexus/requirements.txt -q

    # Run opencga load
    opencga_cmd="python3 opencga_upload_and_index.py --metadata /home/dnanexus/in/metadata.json \
                                                     --credentials /home/dnanexus/in/credentials.json \
                                                     --vcf /home/dnanexus/in/"${vcf_name}" \
                                                     --cli /home/dnanexus/${cli_name}/bin/opencga.sh \
                                                     --dnanexus_fid ${dnanexus_fid}"
    echo "${opencga_cmd}"
    eval "${opencga_cmd}"

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
#    if [[ file exists]]:
#      cat
#       dx-jobutil-report-error "My error message"

    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    output=$(dx upload output --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output output "$output" --class=file
}
